# -*- coding: utf-8 -*-
"""BuildingExtraction_UNet_main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hD0MtMsDHriBgK1xNmJEX-uv1AjtyDhN
"""

import numpy as np
import matplotlib.pyplot as plt
import os
import zipfile

drive_zip = '/content/drive/My Drive/Colab_Data/vaihingen-trial-data.zip'
zip_ref = zipfile.ZipFile(drive_zip,'r')
zip_ref.extractall('/tmp')
zip_ref.close()

from PIL import Image
label_dir = '/tmp/vaihingen-trial-data/label/'
mask_dir = '/tmp/vaihingen-trial-data/mask/'
for path in os.listdir(label_dir):
  abs_path = os.path.join(label_dir,path)
  im = Image.open(abs_path)
  im_a = np.asarray(im)
  im_size = im_a.shape[:2]
  new_mask = np.zeros(im_size)
  c1 = np.stack([im_a[...,0]==0,im_a[...,1]==0,im_a[...,2]==255],axis=-1)
  new_mask[c1.all(-1)] = 255
  new_im = Image.fromarray(new_mask)
  new_im = new_im.convert('L')
  new_im.save(os.path.join(mask_dir,path))

from model_unet import *
from prepare_data import *

train_dir = '/tmp/vaihingen-trial-data/'

data_gen_args = dict(rotation_range=0.2,
                    width_shift_range=0.05,
                    height_shift_range=0.05,
                    shear_range=0.05,
                    zoom_range=0.05,
                    horizontal_flip=True,
                    fill_mode='nearest')

myGene = trainGenerator(20,train_dir,'image','mask',data_gen_args,image_color_mode = "rgb")

tf.keras.backend.clear_session()
model = unet(input_size = (256,256,3))
#model.summary()
#model_checkpoint = tf.keras.callbacks.ModelCheckpoint('unet_membrane.hdf5', monitor='loss',verbose=1, save_best_only=True)
model.fit(myGene,steps_per_epoch=50,epochs=5,verbose=1)

test_path = '/tmp/vaihingen-trial-data/image/top_mosaic_09cm_area1.png'
test_img = tf.keras.preprocessing.image.load_img(test_path,target_size=(256,256))
x = tf.keras.preprocessing.image.img_to_array(test_img)

x = np.expand_dims(x,axis=0)
#print(x[0])
pred = model.predict(x)
#plt.imshow(pred[0][...,1])
plt.figure()
plt.imshow(test_img)
plt.figure()
plt.imshow(pred[0][...,0])